#!/bin/bash -e

#functions
dims(){ #get dimensions of given matrix
    #height x width
    #rows x cols

    #error if more than one arg
    if [ $mat2 ]; then
        >&2 echo "error: too many arguments" #output error to stderror
        exit -1
    fi

    #get input if no arg
    if [ ! $mat1 ]; then
        cat > temp1.txt
        mat1="temp1.txt"
    fi  

    #count rows
    while read -r
    do
        rows=$(expr $rows + 1) #increment each time the read loop goes to the next line
    done < $mat1

    #count cols
    while read -a entries
    do 
        cols=${#entries[@]} #equal to the number of numbers in the row
    done < $mat1
}

transpose(){ #tranpose the given matrix
    #error if more than one arg
    if [ $mat2 ]; then
        >&2 echo "error: too many arguments" #output error to stderror
        exit -1
    fi

    #get input if no arg
    if [ ! $mat1 ]; then
        cat > temp1.txt
        mat1="temp1.txt"
    fi  

    dims #get dimensions of given matrix
    > trans.txt # clear the file

    for i in $(seq 1 1 $cols) #loop for the number of columns
    do
        postTrans=() #clear the array
        preTrans=$(cut -f $i < $mat1) #put the indexed column into preTrans

        #directly get numbers from preTrans and put them into postTrans
        for num in $preTrans 
        do
            postTrans+=( $num )
        done

        #output the columns horizontally with a tab after each number and a newline at the end
        for j in $(seq 0 1 $(expr $rows - 1)) #loop for each row
        do
            echo -n -e ${postTrans[$j]} >> trans.txt #print the number at the given index

            if [ $j = $(expr $rows - 1) ]; then #if the increment is the last element
                echo -e -n "\n" >> trans.txt #print a newline
                break #do not print a tab
            fi
            echo -n -e "\t" >> trans.txt #print a tab
        done
    done
}

mean(){ #output the rounded mean of each column from the given matrix
    #error if more than one arg
    if [ $mat2 ]; then
        >&2 echo "error: too many arguments" #output error to stderror
        exit -1
    fi

    #get input if no arg
    if [ ! $mat1 ]; then
        cat > temp1.txt
        mat1="temp1.txt"
    fi

    dims    #get dimensions of the matrix
    mean=0  #mean of the column
    elem=0  #index of the column
    flag1=1 #flag to exit while loop
    flag2=0 #flag to print tabs after each number, but not the last one

    while [ $flag1 = 1 ] #loop until all columns have been read
    do
        if [ $flag2 = 1 ]; then #if it is at least the second iteration of the while loop
            echo -n -e "\t" #print a tab
        fi

        #reset variables
        count=0 #number of iterations of the read loop
        sum=0   #sum of the column

        #read the given matrix and sum up the column numbered $elem
        while read -a num2
        do
            #used to bypass error when adding 0 + 0
            if [ ${num2[$elem]} = 0 ] && [ $sum = 0 ]; then
                sum=0
            else
                sum=$(expr $sum + ${num2[$elem]}) #add the number to the sum
            fi

            count=$(expr $count + 1) #increment each read through
        done < $mat1

        #rounding formula provided from program desc
        rounding="($sum + ($rows/2)*( ($sum>0)*2-1 )) / $rows"
        mean=$(($rounding))
        echo -n $mean #print the mean of the column without a newline

        if [ $count = $rows ]; then #if all the numbers in the column have been read
            elem=$(expr $elem + 1)  #then move the index to the next column
            if [ $elem = $cols ]; then #if all columns have been read
                flag1=0                #then exit the while loop
            fi
        fi
        flag2=1 #flag to print tabs after each number, but not the last one
    done
    echo -n -e "\n" #print a newline
}

add(){
    #error if fewer than 2 arguments
    if [ ! $mat1 ] || [ ! $mat2 ]; then
        >&2 echo "error: too few arguments" #output error to stderror
        exit -1
    fi  

    #error if more than two arguments
    if [ $mat3 ]; then
        >&2 echo "error: too many arguments" #output error to stderror
        exit -1
    fi

    dims2 #get dimensions of matrix 1 and 2

    > temp3.txt # clear
    > temp1.txt 
    > temp2.txt 
    > temp11.txt
    > temp22.txt
    > temp4.txt
    > temp5.txt

    echo $rows1 $cols1 >> temp11.txt
    echo $rows2 $cols2 >> temp22.txt

    #error if the matrices do not have the same dimensions
    if [ $rows1 != $rows2 ] || [ $cols1 != $cols2 ]; then
        >&2 echo "error: cannot add matrices with differing dimensions" #output error to stderror
        exit -1
    fi

    flagTab=0 #flag to print tab

    #get numbers and add them
    #outer loop to determine index of array
    for j in $(seq 0 1 $(expr $rows1 - 1)) #loop for the number of rows
    do
        echo $j >> temp4.txt
        #inner loop to get numbers from matrices
        #position of number determined by outer loop
        for i in $(seq 1 1 $cols1) #loop for the number of columns
        do
            echo $i >> temp5.txt
            if [ $flagTab = 1 ]; then #if it is not the first iteration of the inner loop
                echo -n -e "\t"       #then print a tab
                echo -n -e "\t" >> temp3.txt #then print a tab
                echo -n -e "\t" >> temp1.txt #then print a tab
                echo -n -e "\t" >> temp2.txt #then print a tab
            fi

            #reset variables
            sum2=0
            matCol1Arr=()
            matCol2Arr=()
            #get numbers from matrices
            matCol1=$(cut -f $i < $mat1)
            matCol2=$(cut -f $i < $mat2)

            #directly get numbers from matrix1 and store it in an array
            for num in $matCol1
            do
                matCol1Arr+=( $num )
            done
            #directly get numbers from matrix2 and store it in an array
            for num in $matCol2
            do
                matCol2Arr+=( $num )
            done

            echo -n ${matCol1Arr[$j]} >> temp1.txt
            echo -n ${matCol2Arr[$j]} >> temp2.txt

            #used to bypass error when adding 0 + 0
            if [ ${matCol1Arr[$j]} = 0 ] && [ ${matCol2Arr[$j]} = 0 ]; then
                echo -n "0"
                echo -n "0" >> temp3.txt
            else
                #add the two numbers together and print it without a newline
                sum=$(expr ${matCol1Arr[$j]} + ${matCol2Arr[$j]}) 
                echo -n $sum
                echo -n $sum >> temp3.txt
            fi
            
            flagTab=1 #print a tab with the next loop
        done
        flagTab=0 #reset variable
        echo -n -e "\n" #print newline
        echo -n -e "\n" >> temp3.txt #print newline
        echo -n -e "\n" >> temp1.txt #print newline
        echo -n -e "\n" >> temp2.txt #print newline
    done
}

multiply(){
    #error if fewer than two arguments
    if [ ! $mat1 ] || [ ! $mat2 ]; then
        >&2 echo "error: too few arguments" #output error to stderror
        exit -1
    fi  

    #error if more than two arguments
    if [ $mat3 ]; then
        >&2 echo "error: too many arguments" #output error to stderror
        exit -1
    fi

    dims2 #get dimensions of matrix 1 and 2

    #error if the matrices do not have compatible dimensions
    if [ $cols1 != $rows2 ]; then
        >&2 echo "error: cannot multiply due to incompatible dimensions" #output error to stderror
        exit -1
    fi

    #transpose matrix2 to make dot product easier
    temp=$mat1
    mat1=$mat2
    mat2= # clear mat2 for transpose function
    transpose
    mat2="trans.txt"
    mat1=$temp

    flagTab=0 #flag to print tab

    #get numbers and multiply matrices
    #first loop to determine index of first array
    for j in $(seq 0 1 $(expr $rows1 - 1)) #loop for the number of rows
    do
        #second loop to determine index of second array\
        for k in $(seq 0 1 $(expr $rows1 - 1))
        do
            if [ $flagTab = 1 ]; then #if it is not the first iteration of the inner loop
                echo -n -e "\t"       #then print a tab
            fi
            # echo "here1.1"
            dot=0 #reset dot product
            # third loop to iterate through columns and get dot product
            for i in $(seq 1 1 $cols1)
            do
                # echo "here2"
                #reset variables
                product=0
                matCol1Arr=()
                matCol2Arr=()
                #get numbers from matrices
                matCol1=$(cut -f $i < $mat1)
                matCol2=$(cut -f $i < $mat2)

                #directly get numbers from matrix1 and store it in an array
                for num in $matCol1
                do
                    matCol1Arr+=( $num )
                done
                #directly get numbers from matrix2 and store it in an array
                for num in $matCol2
                do
                    matCol2Arr+=( $num )
                done
                # echo "here5"
                #used to bypass error of multiply by 0
                if [ ${matCol1Arr[$j]} = 0 ] || [ ${matCol1Arr[$k]} = 0 ]; then
                    # echo "here6"
                    product=0
                else
                    #get product of the numbers at the indeces
                    # echo "here7"
                    # echo "arr1: " ${matCol1Arr[$j]}
                    # echo "arr2: " ${matCol2Arr[$k]}
                    product=$(expr ${matCol1Arr[$j]} \* ${matCol2Arr[$k]}) 
                fi
                # echo "here8"
                #used to bypass error of 0+0
                if [ $product = 0 ] && [ $dot = 0 ]; then
                    dot=0
                else
                    #get the dot product by summing all the products
                    dot=$(expr $dot + $product)
                fi
                # echo "here9"
            done
            # echo "here10"
            echo -n $dot
            # echo "here11"
            flagTab=1 #print a tab with the next loop
        done
        flagTab=0 #reset variable
        echo -n -e "\n" #print newline
    done
}

dims2(){ #get dimensions of matrix 1 and 2
    #get dimensions of matrix1
    #count rows mat1
    while read -r
    do
        rows1=$(expr $rows1 + 1) #increment each time the read loop goes to the next line
    done < $mat1

    #count cols mat1
    while read -a entries1
    do 
        cols1=${#entries1[@]} #equal to the number of numbers in the row
    done < $mat1

    #get dimensions of matrix2
    #count rows mat2
    while read -r
    do
        rows2=$(expr $rows2 + 1) #increment each time the read loop goes to the next line
    done < $mat2

    #count cols mat2
    while read -a entries2
    do 
        cols2=${#entries2[@]} #equal to the number of numbers in the row
    done < $mat2

    # echo "dims1: " $rows1 $cols1
    # echo "dims2: " $rows2 $cols2
}

#main()
# clear

#get matrice(s) from command line
args=("$@") #put all arguments into an array
mat1="${args[1]}"
mat2="${args[2]}"
mat3="${args[3]}"

if [ ${args[0]} = "dims" ]; then
    dims
    # clear
    echo $rows $cols #output results of dims
    # echo -n -e $rows "\t" $cols "\n"

elif [ ${args[0]} = "transpose" ]; then
    transpose
    cat trans.txt

elif [ ${args[0]} = "mean" ]; then
    mean

elif [ ${args[0]} = "add" ]; then
    add

elif [ ${args[0]} = "multiply" ]; then
    multiply

else #error from invalid command
    >&2 echo "error: invalid command" #output error to stderror
    exit -1
fi
